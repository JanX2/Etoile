TODO
====

First alpha release blockers
----------------------------

- isShared support in COCopier, COItem

- Support for composite cross-persistent root references as we discussed

- Standardizing on -setValue:forProperty: and -valueForProperty: for COObject/NSObject. Existing methods in ETLayoutItem and ETViewpoint will become -setValue:forRepresentedProperty: and -valueForRepresentedProperty:.

- Shorten -[COObject description] output

- Improve -[COObject detailedDescription] code and make output more readable

- Check and update all Core API documentation (underway)

- Check code quality for all Core classes (underway)

- Support dictionaries in -collectionForProperty:removalIndex: and -collectionForProperty:insertionIndex: (write some tests too)

- Remove automatic keyed archiving in COSerialization and require explicit serialization accessors (containing code such as [NSKeyedArchiver archivedDataWithRootObject: value])

Backlog from Oct 2nd
--------------------

- For CORevisionID, does -persistentRootUUID match exactly each persistent root or does it just correspond to the first persistent root in the backing store

- CORevisionID equality involving persistent root UUID (-persistentRootUUID should be the backing store UUID probably)

- Undo changes the current revision is that happens to be recorded by the Undo stack

- To many revision abstractions imo: CORevision, CORevisionInfo, CORevisionID, ETUUID, int64_t.  The code and architecture is more complex than it ought to be.
Ideally we should have just 3, but we should at least remove one.

- Skip transient property descriptions or at least attributes in -[COObject embeddedOrReferencedObjects]

- Implement -persistentEntityDescription to support partial loading

- Rename COTrack to COHistoryTrack protocol

- Implement something like COSelectiveHistoryTrack (using a query to select revisions based on criterias e.g. inner object subset)
- Do we want something to aggregate the history of multiple persistent roots in this same class?

- COSearchResult vs COQuery

- Selective Undo for -undoNode: or elsewhereâ€¦ Should I create a COCommand and call -inverse then compute and apply the selective undo result from this inverse command?

- Store: revert to integer commit id's

- COCommandSetCurrentVersionForBranch: extract selective undo code to COBranch

- COLibrary: sepcial COContainer, one CoreObject can only belong to a single library

- GC: only collect divergent revisions older than X days

- Fix COObjectGraphContext GC following cross-object-graph-context references

- A generic object manager than can open any store and display any COObject
  - Should support displaying all key/values (like past StoreBorwser prototypes)
  - Not blocking release, but critical for ObjectManager

Backlog
-------

x what is the best represent a user's save action (cmd+s) in the current
store model?
	=> Using empty commits with metadata, for now.

revision identifiers:
 - We've settled on a UUID for identifying revisions. Quentin was saying there
   are too many revision abstractions.
   
   - CORevision should be used by framework users
   
   - ETUUID should be used within CoreObject, with the caveat that, in order
     to load the revision contents, you also need to know the persistent root
	 id (any persistent root sharing the backing store works.)

   - CORevisionID should be avoided and may be removed

   - CORevisionInfo is used only as a dumb "property list" to send data from
     COSQLiteStore to COEditingContext.

   - int64_t as revision IDs is an optimization for SQLite only, and is
     used only between COSQLiteStore and the BackingStore, never exposed.
     When a SQLite table has a primary key other than "integer primary key",
     SQLite internally creates an "integer primary key" column


history graph UI
 - summarization (hiding minor revisions)
 - use async fetching of revision info
 x also make a COUndoStack UI (ObjectManager has one)

collaboration
 - interation btn. sync and branching
 - automatic / continuous sync
 - more test cases
 - use delta compression

deletion
 - preserving merge info
 - cross refs shouldn't be tracked?

cross refs
 - switch to url? support cross-store use case?
 - async faulting

typewriter / ProjDemo
 - supply commit metadata
 - use deletion
 - use cross refs
 - use attachments
 - merge UI


- Major tasks
  x App-level undo
    - polish, fine-tune api
  WIP Diff/merge cleanup
  - Cleanup COObject
    x synthesize accessors (started)
    - synthesize all accessors
  - Copying support

- Tests
  - Pass all tests, including all from NestedVersioning, rewriting them where needed.

- COEditingContext / COPersistentRoot / COBranch
  - Add tests for Quentin's improvements to -[COPersistentRoot hasChanges] on 
  - support for loading the root object of a persistent root as a fault
  - asychronous loading of persistent root contents / unfaulting faulted root object
  - full support for cross-persistent root references
    - handle persistent roots unloading
    - all other corner cases in TestCrossPersistentRootReferences.m
  x Use notifications posted by COSQLiteStore (very basic support)
    - think of all corner cases
  - support "transient roots" in a COEditingContext. These are COObjectGraphContext wrappers.
    Or, support creating a persistent root in code, then calling "freeze" which will make it 
    read-only and prevent it from being committed to disk?
  - make deleted persistent roots read-only?
  - expose COSQLiteStore's finalize deletion method
  - (aesthetic) decide to what extent COPersistentRoot, COBranch should
    provide convenience methods that deletate to the COObjectGraphContext:
      [[(COPersistentRoot *)self editingBranch] objectGraphContext]
      
    e.g. I think we should surely keep:
     -[COPersistentRoot rootObject] = { return [[self editingBranch] rootObject]; }
     -[COBranch rootObject] = { return [[self objectGraphContext] rootObject]; }
     
    All of the other methods, I don't know.
  WIP Extend COBranch API to support branches and merging revisions accross tracks
  - Expose COSQLiteStore's attachments feature
  - test [[persistentRoot currentBranch] currentRevision] on a newly created
    persistent root
  - Making additional changes to an uncomitted cheap copy persistent root is broken (we
    don't look at the COObjectGraphContext)
    
- didAwaken: replacement
    - At the end of the setStoreItem:, call -awakeFromDeserialization
    - At the end of object graph loading, -didLoadObjectGraph on each object in topological sort order

- diff/merge API and code
  - Improve Merging (move detection and custom attributed string merger)
  - Need to support persisted partial merge resolutions.
    - Thought about this a bit. I don't think we can provide it in general in the framework,
      apps will have to implement support for it.
      
      Some apps may want to open a temporary persistent root, with its own
      metamodel for managing the merge, others may want to do it only in memory.
      
      Also, though the diff/merge happens at the persistent root granularity,
      there may be multiple inner object trees with different merge UI's.
      (e.g. several types of objects on a canvas in a composite documents)
  - Build an example app with a merging UI
  - Requirements:
    - We will highlight the area where a conflict appeared. It will show the automatic result, and let the user make a manual edit
    - allow both collapsed (like SourceTree) and expanded (like Xcode) diff view

- Oject copy model easy to extend in COObject subclasses (see COObject and COEditingContext copy methods)
  - Tune object copy model to respect user expectations about copy/paste in various recurrent use cases
  - Finish COCopier
  - Support another reference type for copy: NOT a composite reference, but acts like one for the pruposes of copy. see the copy keynote, and the yellow arrows
    => 2013-08-13: Discussed with Quentin and we decided this is probably not so important
  - Maybe need an "isShared" flag related to whether an object is copied when things that refer to it are copied.
    I need to understand the use case a bit more

- Metamodel
  - Add checks that derived properties are not persistent
  - Add check that parent property (isContainer = YES) is derived
  - Add check that one side of an opposite is derived
  - Review other constraints
  - Add a check that the derived side of a multivalued opposite is unordered
  - Add an "indexed" flag to ETPropertyDescription to tell the store whether to include values of that property in search indexes
  - Move to CoreObject
  - It scans over every loaded ObjC class, this is really slow and should be removed

- COObject
  - Attempting to set a value for a readonly property should raise an exception
  - Check COObject KVO semantics and documentation
  - See if we can get rid of all of the properties that only make sense for root objects.
    Maybe have a convention that the root inner object is a subtype of COObject that
    has all of these properties. If we want to make an arbitrary object a root object, 
    we would actually make it a child of the real/wrapper root obejct with all of the
    root object metadata.
  - Clean out legacy code
  - We should have dedicated array/set multivalue mutation methods rather than using:
    -[COObject (void)insertObject: (id)object atIndex: (NSUInteger)index hint: (id)hint forProperty: (NSString *)key]
    for both, IMO (Eric)
  WIP Rather than dynamic subclassing which is flawed/broken (it's impossible to interact cleanly with KVO or other users of dynamic subclassing),
    synthesize accessors for properties when the app developer has made a subclass and marked the property @dynamic. Either using +resolveInstanceMethod
    or some earlier time when the metamodel/class are registered.
  - Use NSSortedSet for sorted composite relationships
  - Use weak references to other COObject instances to prevent retain cycles
  - Variable storage, relationship cache, relationship integrity implementations
    are a mess and need to be rewritten. The variable storage is very
    inefficient (makes mutable copy of collection even when using mutable
    colelction mutation method, so n inserts in O(n^2).), which must be fixed.
  - Throw an exception if the developer names a property that conflicts with a NSObject/COObject method

- COItem
  - tidy up ugly NSMutableDictionary / NSDictionary casting
  - use a std::unordered_map<NSString *, std::pair<uint32_t, id>>
    (i.e. map from string to (COType, object) pair). 
    
    (Well, use a simple wrapper class instead of std::pair.) We could also
    use SEL instead of NSString* for better performance, probably.

- COSQLiteStore
  - Use change count for notifications. Make all mutations increment count.
  - Actually use NSError
  - Record in COPersistentRootInfo a copySource that records the persistent root UUID a cheap copy was made from (or just a flag, isCopy?)
  - exportRevisions: and importRevisions: that take a set of CORevisionID an returns a delta-compressed NSData
    suitable for network transport.
  - Review error handling, especially handling of errors within transactions

- Make COQuery a bit more usable

- General
  - Switch to NSUUID
  
- History browser
  x Initial APIs
  x Initial CORevision cache
  x Initial graph UI in Typewriter
  - Asychronous fetching
  - Complete UI

- Collaboration
  x Initial prototype working in Typewriter

- Error handling
  - Better error message if you try to use a composite relationship across persistent roots, 
    currently you get a COPath does not respond to UUIDValue exception.

Future Work
-----------

- Remove -copyWithZone: in COObject and CODictionary (but EtoileUI must be migrated to COCopier first)
- Switch from FMDB to an SQL abstraction backend
- Improve metamodel checker to ensure matching Objective-C property types (e.g. a ETCollection must be declared as multivalued, a NSArray as ordered)
- Figure out how to compute and present each core object size... Possible choices would be:
	- a raw size including the object history data
	- a snapshot size (excluding the history data)
	- a directory or file size to be expected if the object is exported
- Turn COObject into zombies once garbage collected (see -markAsRemovedFromContext)
x Figure out how to navigate large root object sets very quickly (evaluate writing a COSQLCursor class)/
  How to scroll smoothly through 50 000 root objects in an Object Manager without loading all the objects in memory?
  - I think we more or less have this figured out


Missing Features
----------------

- Schema Upgrade
- NSPredicate to SQL generator using OMeta
- Import/Export


Open Questions
--------------

- Adjust COEditingContext loaded object cache to use a strategy that matches which root objects are going to be accessed recurrently (e.g. photos in a Photo Manager should have priority over other root objects)
- Write a COSQLCursor that can load root objects in advance
- Just minimize the apparent loading time at the UI level (and no other optimizations possibly)
- Use an object pool mechanism to allocate COObject or subclass instances
- Allocate special fault objects that support some basic properties (e.g. -name) and retrieve their values from a single query against the store (e.g. multiples root object names a in single query)
