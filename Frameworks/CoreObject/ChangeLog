2008-04-27 Quentin Mathe <qmathe@club-internet.fr>

	Added a partially implemented object server that plays the roles of a 
	convenient core object factory and a shared cache of all core objects in 
	memory for all related core object contexts.
	* Headers/COObjectServer.h:
	* COObjectServer.m:
	Added.
	* GNUmakefile: Updated.

2008-04-27 Quentin Mathe <qmathe@club-internet.fr>

	Added a rudimentary metadata server only taking care of mapping UUIDs to 
	URLs with a simple dictionary for now.
	* Headers/COMetadataServer.h:
	* COMetadataServer.m:
	* TestMetadataServer.m:
	Added.
	* GNUmakefile: Updated.

2008-04-22 Quentin Mathe <qmathe@club-internet.fr>

	Written some basic serialization tests and ensured COObjectContext doesn't 
	break the existing code. All tests pass but one (NSNumber issue, may be 
	GNUstep-related).
	* COObjectContext.m:
	(+defaultContext): Fixed the incorrect release of the default context that 
	lead to a crash.
	(-recordInvocation:): Tweaked to always push objects on the recorded objects 
	stack and documented. This fix a crash occuring in -endRecord trying to 
	remove an object which isn't present.
	(-snapshotTimeInterval): Corrected to return the ivar value.
	* Headers/NSObject+CoreObject.h: Declared -version in COManagedObject 
	protocol.
	* Headers/COObject.h:
	* COObject.m:
	(-version:): New method with associated property kCOVersionProperty (fix a
	missing selector exception in COObjectContext).
	(+initialize, -init): Updated to declare kCOVersionProperty.
	* TestObject.m: Updated to test kCOVersionProperty.
	* TestSerializer.m: More tests.
	* GNUmakefile: Turned on all tests by default.

2008-04-19  Quentin Mathe <qmathe@club-internet.fr>

	Introduced COOObjectContext to manage pools of managed core objects 
	(COObject and COProxy). First step towards the modularization of COProxy to 
	share all its code with the adaptative model (COObject and related 
	subclasses).
	WARNING: Work in progress code, mostly untested but compiles fine.
	* Headers/COObjectContext.h:
	* COObjectContext.m:
	Added.
	* Headers/COUtility.h: Added various new macros to handle the recording of 
	invocations.
	* Headers/COObject.h: Added _objectContext ivar.
	* COObject.m:
	(-init): Modified to initialize _objectContext ivar.
	(-objectContext):
	(-relatedCoreObjects):
	(-loadRelatedCoreObjects):
	(-storeRelatedCoreObjects):
	New methods (latest three to deal with core object faults).
	(-setValue:forProperty:):
	(-valueForProperty:):
	Modified to use the new recording macros (several other methods will have to 
	be modified).
	* Headers/NSObject+CoreObject.h: Extended COManagedObject protocol to 
	exploit the new managed object context (API needs work). Modified -UUID 
	return type to be an ETUUID value object instead of an NSString.
	* NSObject+CoreObject.m: Minor import change to compile.
	* Headers/COSerializer.h:
	* Headers/CODeserializer.h:
	* COSerializer.m:
	* CODeserializer.m:
	Rewritten to be useful in a different way now that most of their old logic 
	has been moved to EtoileSerialize. Now encapsulates the interaction details 
	with EtoileSerialize.
	* Headers/CoreObject.h: Renenabled serializer classes.
	* GNUmakefile: Updated.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	* Headers/NSObject+CoreObject.h:
	* Headers/COProxy.h:
	* NSObject+CoreObject.m:
	* COProxy.m:
	(-isCoreObjectProxy): Added.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	Fixed compilation with EtoileSerialize trunk version.
	* Headers/CoreObject.h:
	* GNUmakefile: 
	Disabled COSerializer and CODeserializer which aren't needed immediately 
	because EtoileSerialize now provides most of their features in their parent 
	classes.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	WARNING: Doesn't compile with the trunk version of EtoileSerialize.
	* Headers/COProxy.h:
	* COProxy.m:
	Added by copying them from EtoileSerialize.

2008-04-07  Quentin Mathe <qmathe@club-internet.fr>

	Removed existing UUID stuff from CoreObject in favor of the support now 
	offered by EtoileFoundation.
	WARNING: May not compile with the trunk version of EtoileSerialize.
	* UUID:
	* Headers/COUUID.h:
	* COUUID.m:
	Removed. We use ETUUID instead now.
	* Headers/CoreObject.h:
	* Headers/COObject.h:
	* Headers/COSerializer.h:
	* Headers/CODeserializer.h:
	* Source/COObject.m:
	* Source/COSerializer.m:
	* Source/CODeserializer.m:
	* GNUmakefile: 
	Updated.

2008-03-31  Quentin Mathe <qmathe@club-internet.fr>

	* Headers/COGroup.h: Fixed COGroup protocol to inherit from COObject as 
	expected.

2008-03-21  Quentin Mathe <qmathe@club-internet.fr>

	Wrote tests that ensure file copy operation behaves correctly.
	* TestDirectory.m (-testCopyObject): Added.

2008-03-21  Quentin Mathe <qmathe@club-internet.fr>

	Fixed file move operation and probably copy too (have to write tests to 
	ensure copy works as advertised).
	* COFile.m:.
	Fixed -URL to return an autoreleased copy as expected for such value object.
	* CODirectory.m
	(-addObject:, -addSymbolicLink:, -addHardLink:, 
	-checkObjectToBeRemovedOrDeleted:): Corrected object validity boolean test.
	(-addCopiedObject, -addMovedObject:): Fixed destination path to match 
	NSFileManager expectation.
	* TestFile.m:
	* TestDirectory.m:
	Added new tests.

2008-03-20  Quentin Mathe <qmathe@club-internet.fr>

	Introduced a preliminary CoreObject protocol and a filesystem backend that
	implements it.
	* Headers/COObject.h:
	* Headers/COGroup.h:
	Added a rough CoreObject protocol that consists of COObject and COGroup
	protocols. COObject and COGroup classes don't yet conform to these.
	* Headers/COFile.h:
	* COFile.m:.
	* Headers/CODirectory.h:
	* CODirectory.m:.
	Added. These classes makes up the FS server backend that will be later moved 
	out of the framework into a standalone bundle.
	* TestFile.m:
	* TestDirectory.m:
	Added.
	* GNUmakefile:
	* Headers/CoreObject.h: 
	Updated.
