2008-08-04 Quentin Mathe <qmathe@club-internet.fr>

	Finished to clean up and test basic features of COObjectContext (object 
	space/plane-like persistency to be shared by CoreObject data model and 
	COProxy). This code extracted and modularized from COProxy now works as 
	expected. COGroup persistency and advanced features like replacing an object 
	by another temporal instance in a CoreObject graph aren't implemented yet.
	WARNING: Unstable API, do not use.
	* Headers/COObject.h:
	* COObject.m:
	New ivar _objectVersion.
	(+automaticallyMakeNewInstancesPersistent, 
	+setAutomaticallyMakeNewInstancesPersistent:, 
	-objectContext, 
	-objectVersion, -_setObjectVersion:, -lastObjectVersion, -isPersistent, 
	-save, 
	-UUID, 
	-serializerDidFinish:forVersion:, -deserializerDidFinish:forVersion:): 
	New methods.
	(-serialize:using:): Modified to ignore _objectVersion.
	(-uniqueID): Deprecated.
	* Headers/COSerializer.h:
	* COSerializer.m:
	(+defaultBackendClass, +defaultCoreObjectDeltaSerializerForObject:, 
	+defaultCoreObjectFullSaveSerializerForObject:, +serializationURLForObject:,
	+serializerWithBackend:objectVersion:forURL:, +serializeObject:toURL:, 
	-version): New ETSerializer category methods.
	* Headers/CODeserializer.h:
	* CODeserializer.m:
	(+defaultCoreObjectDeserializer, +deserializerObjectWithURL:): 
	New ETDeserializer category methods.
	* Headers/COObjectContext.h:
	* COObjectContext.m:
	(-snapshotSerializerForObject:, -deltaSerializerForObject:): 
	Modified to return ready-to-use serializers set up by 
	ETSerializer(COSerializer). 
	(-lastSnapshotOfObject:forVersion:snapshotVersion:): Fixed to really 
	deserialize the last snapshot before the given version and not just the 
	last snapshot. Also modified to update the object version of the returned 
	instance.
	(-playbackInvocations:fromVersion:toVersion:): Modified to update the object 
	version of the returned instance.
	(-recordInvocation:): Modified to return the object version incremented or 
	not on return, this allows to know whether the invocation was recorded or 
	not. Fixed to return at the right time when an invocation doesn't have to 
	be recorded (record stack not empty). Added a check to be sure the target 
	belongs to the context.
	(-serializeInvocation:): Modified to handle object versions. Fixed to 
	correctly increment and retrieve the version bound to the delta serializer. 
	Added code to take a BaseVersion snapshot on first invocation record. Added 
	some assertion checks.
	(-logInvocation:recordVersion:): Modified to increment the context version.
	(-snapshotObject:shouldIncremementObjectVersion:): New method.
	(-snapshotObject:): Moved code into the previous method.
	* Headers/COUtility.h: Modified the macros to record invocations of managed 
	methods.
	* TestSerializer.m:
	* TestObjectContext.m: 
	Added.
	* Source/COObjectServer.m:
	* Source/COGroup.m (+objectWithURL:):
	* Source/CODirectory.m (+objectWithURL:):
	Fixed warnings in COObjectServer by declaring +objectWithURL in COGroup 
	protocol.

2008-05-25 Quentin Mathe <qmathe@club-internet.fr>

	Improved the filesystem backend to work as expected with EtoileUI, mainly by
	cleanly exporting metadatas as properties, supporting to test whether a URL 
	references a group or not, and properly turning pick and drop operations 
	into filesystem operations through ETCollectionMutation.
	* Headers/COGroup.h:
	* COGroup.m:
	Modified COGroup protocol to conform to ETCollectionMutation.
	(-insertObject:atIndex:): New method (to be conform to ETCollectionMutation).
	(-isOrdered): Modified to return NO (may change later).
	(+isGroupAtURL:): New method (protocol and class).
	* Headers/CODirectory.h:
	* CODirectory.m:
	(+isGroupAtURL:): New method.
	(-exists): Moved existing code into +isGroupAtURL: and modified to call it.
	* COFile.m:
	(-metadatas): Fixed to include URL, name, displayName and icon in metadatas.
	(-valueForProperty:): Improved to only look up in superclass the properties 
	not declared in metadatas.
	(-properties): Fixed to expose metadatas as properties.
	(-setURL:): Improved to raise an exception if the URL doesn't reference a 
	file.

2008-05-20 Quentin Mathe <qmathe@club-internet.fr>

	Improved COObject protocol and made COObject and COGroup classes conform to
	their associated protocols. Fixed various compiler warnings by taking care
	of that.
	* GNUmakefile: Disabled serialization tests temporarily.
	* Headers/COObject.h:
	* COObject.m:
	Added -uniqueID to COObject protocol and modified COObject class to conform 
	to the former protocol. Also made COObject protocol inherits from NSObject 
	and NSCopying protocol.
	(-properties, -metadatas, -isCopyPromise): Added for COObject protocol 
	conformance.
	(-hash, -isEqual:): Fixed type declarations to match NSObject API.
	* Headers/COGroup.h:
	* COGroup.m:
	Modified COGroup class to conform to COGroup protocol.
	(-isGroup:, -isOpaque:, -addGroup, -removeGroup, -groups): Added for COGroup 
	protocol conformance.
	(-isOrdered, -isEmpty, -content, -contentArray): Added for ETCollection 
	protocol conformance.
	(-propertyList): Added a cast to <COObject> to get rid of a warning 
	about conflicting return types with -[NSEvent uniqueID].
	* Headers/COFile.h:
	* COFile.m:
	(-uniqueID): Added.
	(-hash, -copyWithZone:): Fixed type declarations to match NSObject and 
	NSCopying API.

2008-05-20 Quentin Mathe <qmathe@club-internet.fr>

	* COObject.m (-serialize:using:, -deserialize:fromPointer:version:): New 
	methods to handle the serialization of managed core objects (ETSerializable 
	informal protocol).

2008-04-27 Quentin Mathe <qmathe@club-internet.fr>

	Added a partially implemented object server that plays the roles of a 
	convenient core object factory and a shared cache of all core objects in 
	memory for all related core object contexts.
	* Headers/COObjectServer.h:
	* COObjectServer.m:
	Added.
	* GNUmakefile: Updated.

2008-04-27 Quentin Mathe <qmathe@club-internet.fr>

	Added a rudimentary metadata server only taking care of mapping UUIDs to 
	URLs with a simple dictionary for now.
	* Headers/COMetadataServer.h:
	* COMetadataServer.m:
	* TestMetadataServer.m:
	Added.
	* GNUmakefile: Updated.

2008-04-22 Quentin Mathe <qmathe@club-internet.fr>

	Written some basic serialization tests and ensured COObjectContext doesn't 
	break the existing code. All tests pass but one (NSNumber issue, may be 
	GNUstep-related).
	* COObjectContext.m:
	(+defaultContext): Fixed the incorrect release of the default context that 
	lead to a crash.
	(-recordInvocation:): Tweaked to always push objects on the recorded objects 
	stack and documented. This fix a crash occuring in -endRecord trying to 
	remove an object which isn't present.
	(-snapshotTimeInterval): Corrected to return the ivar value.
	* Headers/NSObject+CoreObject.h: Declared -version in COManagedObject 
	protocol.
	* Headers/COObject.h:
	* COObject.m:
	(-version:): New method with associated property kCOVersionProperty (fix a
	missing selector exception in COObjectContext).
	(+initialize, -init): Updated to declare kCOVersionProperty.
	* TestObject.m: Updated to test kCOVersionProperty.
	* TestSerializer.m: More tests.
	* GNUmakefile: Turned on all tests by default.

2008-04-19  Quentin Mathe <qmathe@club-internet.fr>

	Introduced COOObjectContext to manage pools of managed core objects 
	(COObject and COProxy). First step towards the modularization of COProxy to 
	share all its code with the adaptative model (COObject and related 
	subclasses).
	WARNING: Work in progress code, mostly untested but compiles fine.
	* Headers/COObjectContext.h:
	* COObjectContext.m:
	Added.
	* Headers/COUtility.h: Added various new macros to handle the recording of 
	invocations.
	* Headers/COObject.h: Added _objectContext ivar.
	* COObject.m:
	(-init): Modified to initialize _objectContext ivar.
	(-objectContext):
	(-relatedCoreObjects):
	(-loadRelatedCoreObjects):
	(-storeRelatedCoreObjects):
	New methods (latest three to deal with core object faults).
	(-setValue:forProperty:):
	(-valueForProperty:):
	Modified to use the new recording macros (several other methods will have to 
	be modified).
	* Headers/NSObject+CoreObject.h: Extended COManagedObject protocol to 
	exploit the new managed object context (API needs work). Modified -UUID 
	return type to be an ETUUID value object instead of an NSString.
	* NSObject+CoreObject.m: Minor import change to compile.
	* Headers/COSerializer.h:
	* Headers/CODeserializer.h:
	* COSerializer.m:
	* CODeserializer.m:
	Rewritten to be useful in a different way now that most of their old logic 
	has been moved to EtoileSerialize. Now encapsulates the interaction details 
	with EtoileSerialize.
	* Headers/CoreObject.h: Renenabled serializer classes.
	* GNUmakefile: Updated.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	* Headers/NSObject+CoreObject.h:
	* Headers/COProxy.h:
	* NSObject+CoreObject.m:
	* COProxy.m:
	(-isCoreObjectProxy): Added.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	Fixed compilation with EtoileSerialize trunk version.
	* Headers/CoreObject.h:
	* GNUmakefile: 
	Disabled COSerializer and CODeserializer which aren't needed immediately 
	because EtoileSerialize now provides most of their features in their parent 
	classes.

2008-04-15  Quentin Mathe <qmathe@club-internet.fr>

	WARNING: Doesn't compile with the trunk version of EtoileSerialize.
	* Headers/COProxy.h:
	* COProxy.m:
	Added by copying them from EtoileSerialize.

2008-04-07  Quentin Mathe <qmathe@club-internet.fr>

	Removed existing UUID stuff from CoreObject in favor of the support now 
	offered by EtoileFoundation.
	WARNING: May not compile with the trunk version of EtoileSerialize.
	* UUID:
	* Headers/COUUID.h:
	* COUUID.m:
	Removed. We use ETUUID instead now.
	* Headers/CoreObject.h:
	* Headers/COObject.h:
	* Headers/COSerializer.h:
	* Headers/CODeserializer.h:
	* Source/COObject.m:
	* Source/COSerializer.m:
	* Source/CODeserializer.m:
	* GNUmakefile: 
	Updated.

2008-03-31  Quentin Mathe <qmathe@club-internet.fr>

	* Headers/COGroup.h: Fixed COGroup protocol to inherit from COObject as 
	expected.

2008-03-21  Quentin Mathe <qmathe@club-internet.fr>

	Wrote tests that ensure file copy operation behaves correctly.
	* TestDirectory.m (-testCopyObject): Added.

2008-03-21  Quentin Mathe <qmathe@club-internet.fr>

	Fixed file move operation and probably copy too (have to write tests to 
	ensure copy works as advertised).
	* COFile.m:.
	Fixed -URL to return an autoreleased copy as expected for such value object.
	* CODirectory.m
	(-addObject:, -addSymbolicLink:, -addHardLink:, 
	-checkObjectToBeRemovedOrDeleted:): Corrected object validity boolean test.
	(-addCopiedObject, -addMovedObject:): Fixed destination path to match 
	NSFileManager expectation.
	* TestFile.m:
	* TestDirectory.m:
	Added new tests.

2008-03-20  Quentin Mathe <qmathe@club-internet.fr>

	Introduced a preliminary CoreObject protocol and a filesystem backend that
	implements it.
	* Headers/COObject.h:
	* Headers/COGroup.h:
	Added a rough CoreObject protocol that consists of COObject and COGroup
	protocols. COObject and COGroup classes don't yet conform to these.
	* Headers/COFile.h:
	* COFile.m:.
	* Headers/CODirectory.h:
	* CODirectory.m:.
	Added. These classes makes up the FS server backend that will be later moved 
	out of the framework into a standalone bundle.
	* TestFile.m:
	* TestDirectory.m:
	Added.
	* GNUmakefile:
	* Headers/CoreObject.h: 
	Updated.
