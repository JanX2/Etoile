#import "COObject+Subclass.h"
#include <objc/runtime.h>

#if 0
static
const char *kCOOriginalClassKey = "COOriginalClassKey";

@interface COObjectSubclassUtils : NSObject
@end

@implementation COObjectSubclassUtils

- (Class) class
{
    Class cls = object_getClass(self);
    
    while (cls != Nil)
    {
        Class origClass = objc_getAssociatedObject(cls, kCOOriginalClassKey);
        
        if (origClass != Nil)
        {
            return origClass;
        }
        cls = class_getSuperclass(cls);
    }
    return Nil;
}

@end

#endif

@implementation COObject (Subclass)

NSString *PropertyToSetter(NSString *prop)
{
    return [NSString stringWithFormat: @"set%@%@:",
            [[prop substringWithRange: NSMakeRange(0, 1)] uppercaseString],
            [prop substringFromIndex: 1]];
}

NSString *SetterToProperty(NSString *prop)
{
    return [NSString stringWithFormat: @"%@%@",
            [[prop substringWithRange: NSMakeRange(3, 1)] lowercaseString],
            [prop substringWithRange: NSMakeRange(4,  [prop length] - 5)]];
}

#if 0
static void
COAddMethodIfDoesNotRespond(Class cls, SEL cmd, IMP imp, const char *type)
{
    if (![cls instancesRespondToSelector: cmd])
    {
        class_addMethod(cls, cmd, imp, type);
    }
}
#endif

static id genericGetter(id theSelf, SEL theCmd)
{
    id result = [theSelf primitiveValueForKey: NSStringFromSelector(theCmd)];
    return result;
}

static void genericSetter(id theSelf, SEL theCmd, id value)
{
    NSString *key = SetterToProperty(NSStringFromSelector(theCmd));
	
    [theSelf setValue: value forPropertyWithoutSetter: key];
}

#if 0
static Class
CONewClassForEntityDescription(ETEntityDescription *entity, Class superclass, NSString *classname)
{
    Class cls = objc_allocateClassPair(superclass, [classname UTF8String], 0);

    for (ETPropertyDescription *propDesc in [entity propertyDescriptions])
    {
        NSString *propName = [propDesc name];
        
        COAddMethodIfDoesNotRespond(cls, sel_getUid([propName UTF8String]), (IMP)&genericGetter, "@@:");
        COAddMethodIfDoesNotRespond(cls, sel_getUid([PropertyToSetter(propName) UTF8String]), (IMP)&genericSetter, "v@:@");
    }
    
    class_addMethod(cls, @selector(class), class_getMethodImplementation([COObjectSubclassUtils class], @selector(class)), "#@:");
    class_addMethod(cls, @selector(superclass), class_getMethodImplementation([COObjectSubclassUtils class], @selector(superclass)), "#@:");
    
    objc_registerClassPair(cls);
    
    objc_setAssociatedObject(cls, kCOOriginalClassKey, superclass, OBJC_ASSOCIATION_ASSIGN);    
    
    return cls;
}


+ (Class) autogeneratedSubclassForClass: (Class)superclass entityDescription: (ETEntityDescription *)entity
{
    NSString *key = [NSString stringWithFormat: @"%@_%@", NSStringFromClass(superclass), [entity name]];
    Class cls = objc_getClass([key UTF8String]);
    
    if (cls != Nil)
        return cls;
    
    cls = CONewClassForEntityDescription(entity, superclass, key);
    return cls;
}
#endif

+ (BOOL)resolveInstanceMethod:(SEL)sel
{
    Class classToCheck = [self class];//object_getClass(self);
    
    while (classToCheck != Nil)
    {
        unsigned int propertyCount;
        objc_property_t *propertyList = class_copyPropertyList(classToCheck, &propertyCount);
        for (unsigned int i=0; i<propertyCount; i++)
        {
            objc_property_t property = propertyList[i];
            
            NSString *propName = [NSString stringWithUTF8String: property_getName(property)];
            NSString *setterName = PropertyToSetter(propName);
            
            if (NSSelectorFromString(propName) == sel)
            {
                class_addMethod(classToCheck, sel, (IMP)&genericGetter, "@@:");
                return YES;
            }
            else if (NSSelectorFromString(setterName) == sel)
            {
                class_addMethod(classToCheck, sel, (IMP)&genericSetter, "v@:@");
                return YES;
            }
        }
        free(propertyList);
        
        classToCheck = class_getSuperclass(classToCheck);
    }
    return NO;
}

@end
