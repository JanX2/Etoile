x Undo/redo support (app-level)
  x Requirements:
    x I want restarting applications to be side-effect-free, which means all undo/redo stacks must be persistent.
    x Applications/UI designers should have great flexibility in deciding on undo behaviour:
      - Making selections in a graphics editor is either included in the undo stack or not, depending on the app developer's choice
      - navigation (switching to a different section of the app) is either included in the undo stack or not, depending on the app developer's choice
        (e.g. Lightroom includes switching between tabs in its undo stack)
    x Support scenarios where subsections of a persistent root have their own undo stack
      (in IDE's like Xcode or Eclipse, each source file has its own undo stack. If the project is one persistent root, and each class/file within the
       project is just an embedded object, we need to implement separate undo/redo stacks for each file somehow)
       => Working & tested, see TestHistoryTrack.m
    x Support scenarios where an application can edit several persistent root, and unify the edits into a single undo/redo stack
      (e.g., an object manager editing the names of different persistent roots. The CoreObject version of a filename is stored in the
       root embedded object of a persistent root). 
       => Working, need to write a test for this use case
    x selective undoing your commits in a collaborative editing scenario
       => Should work with no further effort, sort of demonstrated by TestHistoryTrack.m
    x support undo/redo of branch/delete branch, create persistent root/delete persistent root, revert to old revision (if app desires)
       => Working & tested, see TestUndo.m
    x want to be able to tell whether a branch creation came before or after a commit. Timestamps may not be enough if commits are made in a loop
      This was why the earlier CoreObject used revision numbers for both undo/redo actions and regular commits.
       => COUndoStackStore stores edits in the order they are added, which satisfies this requirement.
  - Implementation ideas:
    x Reintroduce something like COCustomTrack which dynamically switches from
      navigational undo/redo to selective undo/redo. This should be sufficient
      to implement undo/redo for collaboration where the undo/redo commands only
      affect your own actions, as well as undo/redo for applications
       => implemented in COEditSetCurrentVersionForBranch
    - Reintroduce something like COHistoryTrack which allows undo/redo on subsets of a persistent root using selective undo
      => dynamically grouping edits isn't interesting imho. the current system satisfies what I wanted to achieve with COHistoryTrack anyway
    - custom track that tracks all changes made to store (like in cambridge typewriter demo)
      => after some thought it doesn't really make sense to automatically add
         edits to an undo stack. I decided that pushing an edit on the undo stack should
         only be done when the user is actively making a change in an application, in which case it's up to the 
         app policy to decide which stack (if any). Also edits should only be pushed onto a single stack.