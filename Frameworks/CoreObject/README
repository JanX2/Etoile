==========
CoreObject
==========


:Maintainer: Yen-Ju Chen <yjchenx gmail >
:License: MIT Licence.
:Version: 0.1

CoreObject provides a common storage facility for objects with properties,
such as contact information, playlist, bookmark, etc.
These objects have defined structure (property-value relationship) 
which can be handled better than general property list.
But values of these properties are too flexible to be stored in database,
for example, a contact information may have multipe home phone numbers.
Records can be grouped and groups can have groups inside.
AddressBook framework from Apple provides a good machenism of handling 
these kind of objects. CoreObject aims to provide a general storage 
facility based on similar interface.

It also includes a subset of Blocks framework[1] to build applications
in plugin architecture.

Before writing code that uses CoreObject, be sure to read Known Limitations 
section.

Note: CoreObject is written from scratch. 
It only try to mimic the API of AddressBook.
CoreObject was initially called OrganizeKit. This framework was supposedly to 
be the next version of CollectionKit. OrganizeKit became CoreObject when we 
realized it precisely offers the Name Service layer which had been envisionned
for CoreObject.

[1] http://www.hogbaysoftware.com/project/blocks

Developer
---------

* CoreObject provides three basic unit:
  COObject, COGroup and COCollection.

* COObject is the basic unit with arbitrary property.
  It provides -setValue:forKey: and -valueForKey:. 
  Besides basic data type provided by GNUstep, COMultiValue is allowed.

* COGroup is a subclass of COObject and can contain objects or subgroups.
  It has a hierarchical structure where any object must belong to one
  or more groups (subgroups).

* COCollection can contain objects and groups.
  Objects may not belong to any group.

* Search is handled with NSPredicate instead of something simliar to 
  ABSearchElement to reduce redundancy.

* Each item has a unique ID (UUID) in the collection.
  It is generated automatically and should not change
  unless collision is avoid.

* Each unit provide property list to be stored.
  

Known Limitations
-----------------

- The Filesystem backend (COFile and CODirectory) is work-in-progress, don't 
  play with it if you prefer to be sure you won't lost any data on your 
  filesystem. Well, in theory it isn't designed to erase your data, but who 
  knows, that's a developer preview release... ;-)
- Multiple object contexts per process are supported but mostly untested.
- Messages sent to multivalues aren't recorded, so you must reset a multivalue 
  on the object that uses it each time you alter a COMultiValue instance.
- No deletion model, so you cannot remove an object from an object context once 
  it has been inserted and there is also no way to handle in-store deletion 
  (deleting an object bundle on disk and removing the entry from the metadata 
  DB).
- Backwards pointers between persistent roots aren't well supported. They are 
  returned by -parentGroups for COObject class or subclass instances, so for 
  now it is advised to avoid using this method.
- No history cleaning.
- No indexing of object properties or metadatas
- No fine-grained concurrency control, hence the loading of an object in memory 
  and the access to an object context must be limited to a single procress. 
  Different processes can read/write different objects at the same time if they 
  belong to different object contexts.
- Object bundles on disk that are moved or renamed must have their entries in 
  the metadata DB updated by hand. There is no way that the metadata server can 
  detect such moves for now. See COMetadataServer.h if you are interested in 
  doing that.
