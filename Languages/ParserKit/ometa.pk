Ometa {

Ometa <- Identifier:parserName (COLON Identifier:superGrammar)? COPEN Grammar:grammarList CCLOSE EndOfFile
Grammar <- Spacing Definition+
Definition <- Identifier LEFTARROW Expression
Expression <- Sequence (SLASH Sequence)*
Sequence <- Prefix* (Spacing RIGHTARROW AOPEN Statements ACLOSE)?
Prefix <- (AND / NOT)? Suffix
Suffix <- Primary (QUESTION / STAR / PLUS)? (':' Identifier)?
Primary <- Identifier:rule (!LEFTARROW
/ OPEN (Expression):e CLOSE
/ Literal:e / Class:e / 
(DOT -> [makeWildcard]):e) -> [addRule: rule expression: e]
# Lexical syntax
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / [[:digit:]]
Literal <- ['] (!['] Char)*:stringLit ['] Spacing -> [makeLiteral: stringLit]
/ ["] (!["] Char)* ["] Spacing
Class <- '[' (!']' Range)*:rangeList ']' Spacing -> [sequence:rangeList]
Range <- Char:first '-' Char:second -> [makeRangeFrom: first to: second] 
	  / Char:tok -> [ makeToken: tok ]
Char <- '\\' [nrt'"\[\]\\]
/ '\\' [0-2][0-7][0-7]
/ '\\' [0-7][0-7]?
/ !'\\' .
LEFTARROW <- '<-' Spacing
RIGHTARROW <- '->' Spacing
SLASH <- '/' Spacing
AND <- '&' Spacing
NOT <- '!' Spacing
QUESTION <- '?' Spacing
STAR <- '*' Spacing
PLUS <- '+' Spacing
OPEN <- '(' Spacing
AOPEN <- '[' Spacing
ACLOSE <- ']' Spacing
CLOSE <- ')' Spacing
COLON <-  ':' Spacing
DOT <- '.' Spacing
COPEN <- '{' Spacing
CCLOSE <- '}' Spacing
Spacing <- (Space / Comment)*
Comment <- '#' (!EndOfLine .)* EndOfLine
Space <- ' ' / '\t' / EndOfLine
EndOfLine <- '\r\n'

}



SmalltalkOmeta : Ometa {

Keyword <- IdentStart IdentCont* COLON
KeywordMessage <- (Keyword Identifier)+
Statements <- KeywordMessage

}
