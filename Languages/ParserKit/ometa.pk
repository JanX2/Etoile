Ometa {

Ometa <- Identifier:parserName (COLON Identifier:superGrammar)? COPEN Grammar:grammarList CCLOSE EndOfFile
Grammar <- Spacing Definition+
Definition <- Identifier LEFTARROW Expression
Expression <- Sequence (SLASH Sequence)*
Sequence <- Prefix* (RIGHTARROW AOPEN Statements ACLOSE)?
Prefix <- (AND / NOT)? Suffix
Suffix <- Primary (QUESTION / STAR / PLUS)?
NamedPrimary <- Primary (':' Identifier)?
Primary <- Identifier !LEFTARROW
/ OPEN Expression CLOSE
/ Literal / Class / DOT
# Lexical syntax
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / [0-9]
Literal <- ['] (!['] Char)* ['] Spacing
/ ["] (!["] Char)* ["] Spacing
Class <- '[' (!']' Range)* ']' Spacing
Range <- Char '-' Char / Char
Char <- '\\' [nrt'"\[\]\\]
/ '\\' [0-2][0-7][0-7]
/ '\\' [0-7][0-7]?
/ !'\\' .
LEFTARROW <- '<-' Spacing
RIGHTARROW <- '->' Spacing
SLASH <- '/' Spacing
AND <- '&' Spacing
NOT <- '!' Spacing
QUESTION <- '?' Spacing
STAR <- '*' Spacing
PLUS <- '+' Spacing
OPEN <- '(' Spacing
AOPEN <- '[' Spacing
ACLOSE <- ']' Spacing
CLOSE <- ')' Spacing
COLON <-  ':' Spacing
DOT <- '.' Spacing
COPEN <- '{' Spacing
CCLOSE <- '}' Spacing
Spacing <- (Space / Comment)*
Comment <- '#' (!EndOfLine .)* EndOfLine
Space <- ' ' / '\t' / EndOfLine
EndOfLine <- '\r\n'

}



ObjcCOmeta : Ometa {

Keyword <- IdentStart IdentCont* COLON
KeywordMessage <- (Keyword Identifier)+
}
