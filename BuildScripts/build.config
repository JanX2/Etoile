#
# Build profile for build.sh
#

# Build directory where downloaded or checked out code is put and built
export BUILD_DIR=$PWD/build
# Base installation directory where GNUstep should put directories such as System, Local etc.
# If not specified, it is set to the build directory (either BUILD_DIR or the 
# value of the --build-dir option)
export PREFIX_DIR=

# SVN scheme and user name used to check out and update GNUstep and Etoile: 
# 'svn co http://' or 'svn co svn://' or 'svn co svn+ssh://<username>@"
export SVN_ACCESS="svn co -q http://"

# Make parallel building option: -j<number> or ''
export J=-j4

#
# Any variables below can be undefined to skip the action it involves (usually 
# building and/or installing some modules).
#
# For example, DEPENDENCY_SCRIPT= and LLVM_VERSION= would prevent the 
# dependencies to be installed and LLVM to be build (and possibly installed 
# based on MAKE_INSTALL value)
#

export LOG_BASE_DIR="\$BUILD_DIR/log"
export LOG_DIR=$LOG_BASE_DIR/`date | sed -e 's/ /-/g'`
export LOG_RULE_TEMPLATE=' 1>> ${LOG_DIR}/$LOG_NAME.log 2>> ${LOG_DIR}/$LOG_NAME-error.log'

# Command used to invoke sudo
# To prevent sudo invocation, pass --testbuild to build.sh or use SUDO=
export SUDO="sudo -E"
# Internal trick to evaluate the SUDO variable
#export _SUDO='$SUDO'
# Command invoked to configure in LLVM, GNUstep and Etoile modules
# See also llvm-configure-basic.sh script
export CONFIGURE="eval ./configure $LOG_RULE_TEMPLATE"
# Command to invoke GNU make, usually make or gmake.
export MAKE="make"
# Note: gnustep-make doesn't support distclean in a project already cleaned, so 
# rather use clean
export MAKE_CLEAN="eval $MAKE clean 1> /dev/null 2> /dev/null"
# Command invoked to install LLVM, GNUstep and Etoile modules
# To skip the install step, use MAKE_INSTALL=
export MAKE_INSTALL="eval \$SUDO $MAKE \${INSTALL_TARGET} $LOG_RULE_TEMPLATE"
#export MAKE_INSTALL="$MAKE install"
# Command invoked to run the Etoile test suites
export MAKE_TEST="$MAKE check"
# Command invoked to build LLVM, GNUstep and Etoile modules
# Can be tweaked to have additional arguments such as messages=yes
# We tell gnustep-make to always pass debug=yes, so optimizations are disabled 
# for GNUstep and Etoile by default... 
# Note: libobjc2 and LanguageKit force their own optimization flags.
export MAKE_BUILD="eval $MAKE \$J \$MAKE_OPTS $LOG_RULE_TEMPLATE"
# Command to dump the environment variables into a log file
export DUMP_ENV="eval env > \${LOG_DIR}/\${LOG_NAME}-env.log"

# Mail address to report build or test suite failures automatically
export MAIL_TO=

# Script to send mail reports about build or test failures (using sendemail program)
# Another script can be used to send mails through other programs such as mutt, exim, sendmail etc.	
# For example, using mutt, a custom script could be: mutt -a $MAILATTACHMENTS -s $MAIL_SUBJECT $MAIL_TO"
# This script is searched in the directory that contains this profile
export MAIL_SCRIPT=sendmail.sh

# Script to run to install dependencies required by both GNUstep and Etoile
# This script is searched in the directory that contains this profile
DEPENDENCY_SCRIPT=ubuntu-dep-install.sh

# Etoile version: 'trunk' or ''
export ETOILE_VERSION=trunk

# LLVM version: a valid version (3.2 or higher), 'trunk' or ''
export LLVM_VERSION=trunk
# LLVM configure script: llvm-configure-basic.sh or some custom script
# In case, this script is changed, LLVM_BUILD_OUTPUT might have to be updated.
export LLVM_CONFIGURE=llvm-configure-basic.sh
# Name of the subdirectory inside the LLVM source that hosts the built LLVM 
# binaries and libraries, this name is derived from the flags passed to 
# LLVM configure (see llvm-configure-basic.sh)
export LLVM_BUILD_OUTPUT=Release+Debug+Asserts

# GNUstep Runtime (aka libobjc2) version: a valid version, 'trunk' or ''
export RUNTIME_VERSION=trunk
# GNUstep Make version: a valid version, 'trunk' or ''
export MAKE_VERSION=trunk
# GNUstep Base version: a valid version, 'trunk' or ''
export BASE_VERSION=trunk
# GNUstep Gui version: a valid version, 'trunk' or ''
export GUI_VERSION=trunk
# GNUstep Back version: a valid version, 'trunk' or ''
export BACK_VERSION=trunk
# Gorm version: a valid version or ''
export GORM_VERSION=trunk

# VCS program to check out the LLVM source code: 'svn' or 'git'
export LLVM_ACCESS=svn
# SVN scheme and user name used to check out and update LLVM: 
# 'svn co http://' or 'svn co svn://' or 'svn co https://<username>@"
export LLVM_SVN_ACCESS="svn co -q http://"
# Base installation directory for LLVM: a valid path or ''
# Can be the same than PREFIX_DIR or something such as '$BUILD_DIR/llvm-install-$LLVM_VERSION'
# By default, LLVM is not installed, the libraries and binaries e.g. Clang are 
# searched inside the LLVM build directory
export LLVM_INSTALL_DIR=

#
# Private Variables for Build Scripts
#
# Don't customize any variables below.
#

# Build scripts can override this variable per module. 
# For example, libobjc2 uses  'install/strip' as INSTALL_TARGET
export INSTALL_TARGET="install"
